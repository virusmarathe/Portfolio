using System.Collections.Generic;
using System.Diagnostics;
//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Command.cs
//  @ Date : 1/14/2011
//  @ Author : 
//
//
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input.Touch;
using PsychicNinja.Data.Util;
using PsychicNinja.Metrics;
using System;
using PsychicNinja.Data.Patrol;

/* Command Types
 *  MoveLeft = 0,
    MoveRight = 1,
    Jump = 2,
    WallJump = 3,
    WallSlide = 4,
    LedgeClimb = 5,
    ObjectThrow = 6,
 */

namespace PsychicNinja.Data.Object
{

    public class Command : WorldObject
    {
        private const int commandSize = 70;
        private const int halfCommand = commandSize / 2;
        public bool newlyCreated = true;

        public bool selected;
        private CommandType type;

        CommandTarget actionTarget = null;

        public bool FacesLeft = false;
        public LinkedList<Platform> ConnectedPlatforms;

        //Command Animations
        AnimationComponent myIconAnimation;

        //Run Left
        private static List<Texture2D> RunLeftIcon;

        //Run Right
        private static List<Texture2D> RunRightIcon;

        //Jump
        private static List<Texture2D> JumpIcon;

        //Wall Jump
        private static List<Texture2D> WallJumpIcon;

        //Wall Slide
        private static List<Texture2D> WallSlideIcon;

		//Ledge Climb
        private static List<Texture2D> LedgeClimbIcon;

        private static List<Texture2D> UseItemIcon;
        //Commands
        private static Texture2D[] textures = new Texture2D[7];
        private static Texture2D lineTex;

        /// <summary>
        /// the amount of charges this command was set to have
        /// </summary>
        private int setcharge;
        /// <summary>
        /// the amount of charges remaining on this command during this particular runthrough
        /// </summary>
        public int charges;

        public Command(Point center, CommandType Type)
            : base(new Rectangle(center.X - halfCommand, center.Y - halfCommand, commandSize, commandSize), textures[(int)Type])
        {
            type = Type;
            ConnectedPlatforms = new LinkedList<Platform>();

            selected = false;

            List<Texture2D> myIcons;
            switch (type)
            {
                case CommandType.MoveLeft:
                    myIcons = RunLeftIcon;
                    break;
                case CommandType.MoveRight:
                    myIcons = RunRightIcon;
                    break;
                case CommandType.Jump:
                    myIcons = JumpIcon;
                    break;
                case CommandType.WallJump:
                    myIcons = WallJumpIcon;
                    break;
                case CommandType.WallSlide:
                    myIcons = WallSlideIcon;
                    break;
                case CommandType.LedgeClimb:
                    myIcons = LedgeClimbIcon;
                    break;
                case CommandType.ObjectThrow:
                    myIcons = UseItemIcon;
                    actionTarget = new CommandTarget(new Point(center.X + 200, center.Y));
                    break;
                default:
                    throw new Exception("Invalid command type encountered in Command.Command()");
            }

            myIconAnimation = new AnimationComponent(myIcons, drawRect.Left, drawRect.Top, drawRect.Width, drawRect.Height, 1);

            setcharge = 1;
            charges = 1;
        }

        public static new void LoadContent(ContentManager Content)
        {
            RunLeftIcon = new List<Texture2D>();
            RunRightIcon = new List<Texture2D>();
            JumpIcon = new List<Texture2D>();
            WallJumpIcon = new List<Texture2D>();
            WallSlideIcon = new List<Texture2D>();
			LedgeClimbIcon = new List<Texture2D>();
            UseItemIcon = new List<Texture2D>();
            lineTex = Content.Load<Texture2D>("line");
            textures[0] = Content.Load<Texture2D>("Commands/MoveLeft");
            textures[1] = Content.Load<Texture2D>("Commands/MoveRight");
            textures[2] = Content.Load<Texture2D>("Commands/Jump");
            textures[3] = Content.Load<Texture2D>("Commands/WallJump");
            textures[4] = Content.Load<Texture2D>("Commands/WallSlide");
            textures[5] = Content.Load<Texture2D>("Commands/LedgeClimb");
            textures[6] = Content.Load<Texture2D>("Commands/tonyshriekenthrow");

			RunLeftIcon.Add(textures[0]);
            RunLeftIcon.Add(Content.Load<Texture2D>("Commands/MoveLeft1"));
            RunLeftIcon.Add(Content.Load<Texture2D>("Commands/MoveLeft2"));
            RunLeftIcon.Add(Content.Load<Texture2D>("Commands/MoveLeft3"));
			
			RunRightIcon.Add(textures[1]);
            RunRightIcon.Add(Content.Load<Texture2D>("Commands/MoveRight1"));
            RunRightIcon.Add(Content.Load<Texture2D>("Commands/MoveRight2"));
            RunRightIcon.Add(Content.Load<Texture2D>("Commands/MoveRight3"));
			
			JumpIcon.Add(textures[2]);
            JumpIcon.Add(Content.Load<Texture2D>("Commands/Jump1"));
            JumpIcon.Add(Content.Load<Texture2D>("Commands/Jump2"));
            JumpIcon.Add(Content.Load<Texture2D>("Commands/Jump3"));
			
			WallJumpIcon.Add(textures[3]);
            WallJumpIcon.Add(Content.Load<Texture2D>("Commands/WallJump1"));
            WallJumpIcon.Add(Content.Load<Texture2D>("Commands/WallJump2"));
            WallJumpIcon.Add(Content.Load<Texture2D>("Commands/WallJump3"));
			
			WallSlideIcon.Add(textures[4]);
            WallSlideIcon.Add(Content.Load<Texture2D>("Commands/WallSlide1"));
            WallSlideIcon.Add(Content.Load<Texture2D>("Commands/WallSlide2"));
            WallSlideIcon.Add(Content.Load<Texture2D>("Commands/WallSlide3"));

			LedgeClimbIcon.Add(textures[5]);
            LedgeClimbIcon.Add(Content.Load<Texture2D>("Commands/LedgeClimb2"));
            LedgeClimbIcon.Add(Content.Load<Texture2D>("Commands/LedgeClimb3"));
            LedgeClimbIcon.Add(Content.Load<Texture2D>("Commands/LedgeClimb"));

            UseItemIcon.Add(Content.Load<Texture2D>("Commands/tonyshriekenthrow"));
            UseItemIcon.Add(Content.Load<Texture2D>("Commands/tonyshriekenthrow1"));
            UseItemIcon.Add(Content.Load<Texture2D>("Commands/tonyshriekenthrow2"));
            UseItemIcon.Add(Content.Load<Texture2D>("Commands/tonyshriekenthrow3"));
			
        }

        /// <summary>
        /// Update the command object. Only exists to make sure base.Update doesn't get called. Commands NEVER move.
        /// </summary>
        /// <param name="timeElapsed"></param>
        public override void Update(int timeElapsed)
        {
            myIconAnimation.CommandUpdate();
        }

        /// <summary>
        /// reset this command's charges to its set value
        /// </summary>
        public void refreshCharges()
        {
            charges = setcharge;
        }

        public CommandType getCommandType()
        {
            return type;
        }

        public override void Draw(SpriteBatch spriteBatch)
        {
            SpriteEffects effect = FacesLeft ? SpriteEffects.FlipHorizontally : SpriteEffects.None;
            Color drawColor = Color.White;

            if (ConnectedPlatforms.Count == 0)
            {
                switch (type)
                {
                    case CommandType.LedgeClimb:
                        drawColor = Color.Red;
                        break;
                    case CommandType.WallJump:
                        drawColor = Color.Red;
                        break;
                    case CommandType.WallSlide:
                        drawColor = Color.Red;
                        break;
                }
            }

            if (charges == 0)
            {
                base.Draw(spriteBatch, new Color(122, 122, 122, 122), effect);
            }
            else
            {
                myIconAnimation.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect, drawColor);
            }

            if (actionTarget == null) return;

            //if (selected)  lol...the targeting reticule wasn't drawing with this if check
            int targetX = actionTarget.ScreenCoordinateDrawFrame().Center.X;
            int targetY = actionTarget.ScreenCoordinateDrawFrame().Center.Y;
            int lineX = this.ScreenCoordinateDrawFrame().Center.X;
            int lineY = this.ScreenCoordinateDrawFrame().Center.Y;
            double mag = Math.Sqrt((targetX-lineX)*(targetX-lineX)+(targetY-lineY)*(targetY-lineY));
            double dir = Math.Atan2((double)(targetY-lineY),(double)(targetX - lineX));
            actionTarget.Draw(spriteBatch);
            spriteBatch.Draw(lineTex, new Rectangle(lineX, lineY, (int)mag, 2), new Rectangle(0,0,1,1), Color.White, (float)dir, Vector2.Zero, SpriteEffects.None, 0);
        }

        #region Platform Binding
        /// <summary>
        /// Adds the platform to our list of connections if it intersects the command.
        /// </summary>
        /// <param name="p"></param>
        public void ConnectToPlatform(Platform p)
        {
            switch (type)
            {
                case CommandType.Jump:
                    return;
                case CommandType.MoveLeft:
                    return;
                case CommandType.MoveRight:
                    return;
                case CommandType.ObjectThrow:
                    return;
            }

            if (!Contains(p.drawRect)) return;

            ConnectedPlatforms.AddLast(p);
            patrol = p.GetPatrol();
            FacesLeft = Center().X < p.Center().X;
            p.Flash();

        }

        public void RecalculateConnectedPlatforms(LinkedList<Platform> listOfWorldPlatforms)
        {
            ClearConnectedPlatforms();
            foreach (Platform p in listOfWorldPlatforms)
            {
                ConnectToPlatform(p);
            }

        }

        public void ClearConnectedPlatforms()
        {
            ConnectedPlatforms.Clear();
            SetPatrol(null);
        }

        /// <summary>
        /// Checks to see if the ninja rectangle Collides with any connected platforms.
        /// </summary>
        /// <param name="rect"></param>
        /// <returns></returns>
        public Platform CollidesWithConnectedPlatforms(WorldObject player)
        {
            foreach (Platform p in ConnectedPlatforms)
            {
                int collisionState = Collision.checkCollisions(player, p);
                //Debug.WriteLine(collisionState);
                if ((collisionState == 2 && player.getVelocity().X >= 0) || (collisionState == 4 && player.getVelocity().X <= 0))
                    return p;

            }
            return null;
        }
        #endregion

        //THIS IS A VERY BAD SOLUTION TO THE WALLJUMP PROBLEM
        public int WJCollidesWithConnectedPlatforms(WorldObject player)
        {
            foreach (Platform p in ConnectedPlatforms)
            {
                int collisionState = Collision.checkCollisions(player, p);
                //Debug.WriteLine(collisionState);
                if ((collisionState == 2 /*&& player.getVelocity().X >= 0*/) || (collisionState == 4 /*&& player.getVelocity().X <= 0)*/))
                    return collisionState;

            }
            return 0;
        }


        public bool ProcessTouch(GestureSample gesture, LinkedList<Platform> listOfWorldPlatforms)
        {
            Point localGesturePoint = Spotlight.TranslateScreenVectorToWorldPoint(gesture.Position);
            //Point localGesturePointAboveFinger = new Point(localGesturePoint.X, localGesturePoint.Y - 20);

            if (CanRespond())
            {
                float scale = Spotlight.getScale();
                collisionRect = Util.Util.ResizeRectangleKeepingCenter(drawRect, (int)(drawRect.Width / scale), (int)(drawRect.Height / scale));
                if (RespondsToWorldTouch(localGesturePoint) || IsFirstResponder())
                {

                    switch (gesture.GestureType)
                    {
                        case GestureType.Tap:
                            break;
                        case GestureType.FreeDrag:
                            SetCenter(localGesturePoint);
                            BecomeFirstResponder();
                            if (!newlyCreated)
                                Spotlight.TemporaryZoomOnObject(this, gesture.Position);
                            RecalculateConnectedPlatforms(listOfWorldPlatforms);
                            break;
                        case GestureType.DragComplete:
                            ResignFirstResponder();
                            Spotlight.EndTemporaryObjectZoom(this);
                            RecalculateConnectedPlatforms(listOfWorldPlatforms);
                            break;
                        case GestureType.Hold:
                            BecomeFirstResponder();
                            Spotlight.TemporaryZoomOnObject(this, gesture.Position);
                            break;

                    }
                    return true;
                }
                else if (actionTarget != null && actionTarget.ProcessTouch(gesture))
                {

                    return true;
                }
                else
                {
                    selected = false;
                    return false;
                }
            }
            else
            {
                if (actionTarget != null && actionTarget.ProcessTouch(gesture))
                {

                    return true;
                }
                return false;
            }
        }

        public override void SetCenter(Point p)
        {
            Point offset = GetThrowVector();
            base.SetCenter(p);
            if (actionTarget != null)
            {
                actionTarget.SetCenter(new Point(p.X + offset.X, p.Y + offset.Y));
            }
        }

        /// <summary>
        /// Returns a point containing the offset between this object and its command target, if it has one. Otherwise Point.Zero
        /// </summary>
        /// <returns></returns>
        public Point GetThrowVector()
        {
            if (type != CommandType.ObjectThrow) return Point.Zero;

            return new Point(actionTarget.Center().X - Center().X, actionTarget.Center().Y - Center().Y);
        }

        public Point GetActionTargetLocation()
        {
            return actionTarget.drawRect.Location;

        }
    }
}