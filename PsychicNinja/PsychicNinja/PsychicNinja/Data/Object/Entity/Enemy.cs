//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Enemy.cs
//  @ Date : 1/14/2011
//  @ Author : 
//
//
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using PsychicNinja.Data.Patrol;

using Microsoft.Xna.Framework.Content;

using PsychicNinja.Data.Util;
using System.Diagnostics;
using System;
using PsychicNinja.Data.Object.Entity;
using PsychicNinja.Metrics;
using PsychicNinja.Logic;

namespace PsychicNinja.Data.Object
{

    public class Enemy : WorldObject
    {

        private LifeState state;

        private EnemyActionState actionState;

        //projectile behavior
        private Boolean shoots;
        private int visionrange;
        private List<Projectile> projectiles;
        private Texture2D projectileTexture;

        private Emitter deathEffectEmitter;

        private EnemyType myType;

        #region Textures

        // Enemy Standing Textures
        private static Texture2D[] StandingTextures = null;

        // Thrown Projectile Texture
        private static Texture2D[] ProjectileTextures = null;

        //Running Animation
        private static List<Texture2D>[] RunTextures = null;
        private static AnimationComponent[] running = null;

        //Attack Animation
        private static List<Texture2D>[] AttackTextures = null;
        private static AnimationComponent[] attacking = null;

        private static bool[] TextureLoaded = new bool[4];

        #endregion


        #region Init

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="rect"></param>
        /// <param name="Velocity"></param>
        /// <param name="tex"></param>
        /// <param name="Shape"></param>
        public Enemy(Rectangle rect, int type, ObjectShape Shape) :
            this (rect, type, Shape, 0, 0)
        {

        }

        public Enemy(Rectangle rect, int type, ObjectShape Shape, int vr, int projectileNum) :
            base(rect, null, Shape)
        {
            myType = (EnemyType) type;
            visionrange = vr;
            state = LifeState.Alive;
            actionState = EnemyActionState.Standing;

            if (vr == 0)
            {
                shoots = false;
                projectileTexture = null;
                projectiles = null;
            }
            else
            {
                shoots = true;
                projectileTexture = ProjectileTextures[0];
                projectiles = new List<Projectile>();
            }
        }

        public static void LoadContent(ContentManager Content, EnemyType type)
        {
            if (StandingTextures == null)
            {
                StandingTextures = new Texture2D[(int)EnemyType.NumberOfEnemies];
                ProjectileTextures = new Texture2D[1];

                RunTextures = new List<Texture2D>[(int)EnemyType.NumberOfEnemies];
                running = new AnimationComponent[(int)EnemyType.NumberOfEnemies];

                AttackTextures = new List<Texture2D>[(int)EnemyType.NumberOfEnemies];
                attacking = new AnimationComponent[(int)EnemyType.NumberOfEnemies];

                for (int i = 0; i < TextureLoaded.Length; ++i)
                    TextureLoaded[i] = false;
            }

            switch (type)
            {
                case EnemyType.Goon:
                    if (TextureLoaded[0]) return;
                    StandingTextures[0] = Content.Load<Texture2D>("Enemies/goonMoveLeft1");
                    RunTextures[0] = new List<Texture2D>();
                    AttackTextures[0] = new List<Texture2D>();

                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft1"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft2"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft3"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft4"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft5"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft6"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft7"));
                    RunTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft8"));
                    running[0] = new AnimationComponent(RunTextures[0], 0, 0, 100, 160, 2);
                    AttackTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft1"));
                    AttackTextures[0].Add(Content.Load<Texture2D>("Enemies/goonMoveLeft1"));
                    attacking[0] = new AnimationComponent(AttackTextures[0], 0, 0, 100, 160, 1);
                    TextureLoaded[0] = true;
                    break;
                case EnemyType.KnifeArtist:
                    if (TextureLoaded[1]) return;
                    StandingTextures[1] = Content.Load<Texture2D>("Enemies/knife artist 1");
                    ProjectileTextures[0] = Content.Load<Texture2D>("ninjastar");
                    RunTextures[1] = new List<Texture2D>();
                    AttackTextures[1] = new List<Texture2D>();

                    RunTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 1"));
                    RunTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 2"));
                    RunTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 3"));
                    RunTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 4"));
                    running[1] = new AnimationComponent(RunTextures[1], 0, 0, 100, 160, 2);
                    AttackTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 5"));
                    AttackTextures[1].Add(Content.Load<Texture2D>("Enemies/knife artist 6"));
                    attacking[1] = new AnimationComponent(AttackTextures[1], 0, 0, 100, 160, 1);
                    TextureLoaded[1] = true;
                    break;
                case EnemyType.Bat:
                    if (TextureLoaded[2]) return;
                    StandingTextures[2] = Content.Load<Texture2D>("Enemies/bat1");
                    ProjectileTextures[0] = Content.Load<Texture2D>("ninjastar");
                    RunTextures[2] = new List<Texture2D>();
                    AttackTextures[2] = new List<Texture2D>();

                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat1"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat2"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat3"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat4"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat5"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat6"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat7"));
                    RunTextures[2].Add(Content.Load<Texture2D>("Enemies/bat8"));

                    running[2] = new AnimationComponent(RunTextures[2], 0, 0, 100, 160, 2);
                    AttackTextures[2].Add(Content.Load<Texture2D>("Enemies/bat1"));
                    AttackTextures[2].Add(Content.Load<Texture2D>("Enemies/bat1"));
                    attacking[2] = new AnimationComponent(AttackTextures[2], 0, 0, 100, 160, 1);
                    TextureLoaded[2] = true;
                    break;
                case EnemyType.Rat:
                    if (TextureLoaded[3]) return;
                    StandingTextures[3] = Content.Load<Texture2D>("Enemies/rat1");
                    ProjectileTextures[0] = Content.Load<Texture2D>("ninjastar");
                    RunTextures[3] = new List<Texture2D>();
                    AttackTextures[3] = new List<Texture2D>();

                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat1"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat2"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat3"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat4"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat5"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat6"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat7"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat8"));
                    RunTextures[3].Add(Content.Load<Texture2D>("Enemies/rat9"));
                    running[3] = new AnimationComponent(RunTextures[3], 0, 0, 100, 160, 2);
                    AttackTextures[3].Add(Content.Load<Texture2D>("Enemies/rat1"));
                    AttackTextures[3].Add(Content.Load<Texture2D>("Enemies/rat1"));
                    attacking[3] = new AnimationComponent(AttackTextures[3], 0, 0, 100, 160, 1);
                    TextureLoaded[3] = true;
                    break;
            }
        }

        public static void UnloadContent()
        {
            StandingTextures = null;
            ProjectileTextures = null;

            RunTextures = null;
            running = null;

            AttackTextures = null;
            attacking = null;

            
        }

        #endregion

        #region Life Cycle

        /// <summary>
        /// Move the enemy
        /// </summary>
        /// <param name="gameTime"></param>
        public void Update(int timeElapsed, Player n)
        {

            if (deathEffectEmitter != null)
            {
                deathEffectEmitter.Update();
                if (deathEffectEmitter.atMaxParticles())
                    deathEffectEmitter.isEmitting = false;
            }

            if (state == LifeState.Dead) return;

            if (patrol != null)
                velocity = patrol.getCurrentVector(timeElapsed);
            
            Point c = Center();

            if(shoots)
            {
                if(facingLeft)
                {
                    if (new Rectangle(c.X - visionrange, c.Y, visionrange, 1).Intersects(n.drawRect))
                    {
                        projectiles.Add(new Projectile(c, new Vector2(-6, Game1.RapperRandomDiggityDawg.Next(-3, 3)), projectileTexture));
                    }
                }
            
               else
                {
                   if (new Rectangle(c.X, c.Y, visionrange, 1).Intersects(n.drawRect))
                   {
                       projectiles.Add(new Projectile(c, new Vector2(6, Game1.RapperRandomDiggityDawg.Next(-3, 3)), projectileTexture));
                   }
                }

                List<Projectile> hitlist = new List<Projectile>();

                foreach (Projectile p in projectiles)
                {
                    p.Update();
                    if (p.lifespan < 0)
                        hitlist.Add(p);
                    else if (p.Contains(n.drawRect))
                        n.villainDeath();
                }
                foreach (Projectile p in hitlist)
                    projectiles.Remove(p);
            }

            if (velocity.X == 0 && velocity.Y == 0)
            {
                actionState = EnemyActionState.Standing;
            }
            else if( Math.Abs(velocity.X) > 0 || Math.Abs(velocity.Y) > 0)
            {
                actionState = EnemyActionState.Running;
                facingLeft = velocity.X < 0;
            }

            switch (actionState)
            {
                case EnemyActionState.Standing:

                    break;
                case EnemyActionState.Running:
                    running[(int)myType].Update(timeElapsed);
                    break;
                case EnemyActionState.Attacking:
                    attacking[(int)myType].Update(timeElapsed);
                    break;
                case EnemyActionState.Dying:

                    break;
            }
            

            base.Update(timeElapsed);
	    }


        /// <summary>
        /// Draw the enemy
        /// </summary>
        /// <param name="spriteBatch"></param>
        public override void Draw(SpriteBatch spriteBatch)
        {

            if (state == LifeState.Dead)
            {
                deathEffectEmitter.Draw(spriteBatch);
                return;
            }

            if (drawTex == null)
                drawTex = StandingTextures[(int)myType];

            if (state == LifeState.Alive)
            {
                SpriteEffects effect = facingLeft ? SpriteEffects.None : SpriteEffects.FlipHorizontally; // Change based on what direction he's facing

                switch (actionState)
                {
                    case EnemyActionState.Standing:
                        base.Draw(spriteBatch);
                        break;
                    case EnemyActionState.Running:
                        running[(int)myType].Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                        break;
                    case EnemyActionState.Attacking:
                        attacking[(int)myType].Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                        break;
                    case EnemyActionState.Dying:

                        break;
                }
                if (shoots)
                    foreach (Projectile p in projectiles)
                        p.Draw(spriteBatch);
            }
        }


        #endregion

        #region Util

        public void setPatrolModel(PatrolModel model)
        {
            patrol = model;
        }

        public void attack()
        {
            actionState = EnemyActionState.Attacking;
        }

        /// <summary>
        /// Kills the enemy preventing him from being updated or drawn
        /// </summary>
        public void death()
        {
            if(state != LifeState.Dead)
            {
                deathEffectEmitter = new Emitter(drawRect, new Vector2(0, -11f), Math.PI / 2, 0.5, 0.001, 80, 45, Player.GoreTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);
                state = LifeState.Dead;
                //actionState = EnemyActionState.Dying;
            }
        }

        public bool IsAlive()
        {
            return state != LifeState.Dead;
        }

        public EnemyType GetEnemyType()
        {
            return myType;
        }

        private static EnemyType GetEnemyTypeFromString(string name)
        {
            if (name.Equals("Enemies/Muscle-Goon"))
            {
                return EnemyType.Goon;
            }
            else if (name.Equals("Enemies/knife artist 1"))
            {
                return EnemyType.KnifeArtist;
            }
            else
            {
                throw new Exception("Invalid Enemy Type.");
            }
        }

        #endregion

    }

    
}

