//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Player.cs
//  @ Date : 1/14/2011
//  @ Author : 
//z
//

using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

using PsychicNinja.Data.Patrol;
using PsychicNinja.Interface;
using PsychicNinja.Data.Util;
using System.Diagnostics;
using System.IO;
using PsychicNinja.Logic;
using PsychicNinja.Data.Object.Entity;

namespace PsychicNinja.Data.Object
{

    public class Player : WorldObject
    {
        private const int NINJA_WIDTH = 50;
        private const int NINJA_HEIGHT = 75;

        private Rectangle resizeRect;

        #region Textures
        private static Texture2D NinjaTexture;

        //Running
        public static Texture2D standTexture;//we need this to draw the start location
        private static List<Texture2D> RunTextures;
        private AnimationComponent running;
        //Jumping
        private static List<Texture2D> JumpTextures;
        private AnimationComponent jumping;
        //Airborne
        private static List<Texture2D> AirborneTextures;
        private AnimationComponent airborne;

        //Wall Jump
        private static List<Texture2D> WallJumpTextures;
        private AnimationComponent wallJumping;

        //Wall Climb
        private static List<Texture2D> WallClimbTextures;
        private AnimationComponent wallClimbing;
        //Rolling
        private static List<Texture2D> RollTextures;
        private AnimationComponent Rolling;
        //Wall Slide
        private static List<Texture2D> WallSlideTextures;
        private AnimationComponent wallSliding;
        //Item Throw
        private static List<Texture2D> ItemThrowTextures;
        private AnimationComponent ItemThrowing;
        //Sword Swing
        private static List<Texture2D> SwordSwingTextures;
        private AnimationComponent SwordSwinging;
        //Run with Sword
        private static List<Texture2D> SwordRunTextures;
        private AnimationComponent SwordRunning;
        //Run with Shuriken
        private static List<Texture2D> ShurikenRunTextures;
        private AnimationComponent ShurikenRunning;
        //Victory Pose
        private static List<Texture2D> VictoryTextures;
        private AnimationComponent VictoryPose;
        //Squish Death
        private static List<Texture2D> SquishDeathTextures;
        private AnimationComponent SquishDying;
        //Fall Death
        private static List<Texture2D> FallDeathTextures;
        private AnimationComponent FallDying;
        //Fire Death
        private static List<Texture2D> FireDeathTextures;
        private AnimationComponent FireDying;
        //Explode Death
        private static List<Texture2D> ExplodeDeathTextures;
        private AnimationComponent ExplodeDying;

        //Death by enemy
        private static List<Texture2D> VillainDeathTextures;
        private AnimationComponent VillainDying;
        #endregion

        private const int NinjaRunSpeed = 7;
        private const int NinjaJumpHeight = -18;
        private const int NinjaWallSlideSpeed = 3;

        public Platform WallSlidePlatform;

        private bool[] ninjaCrush = new bool[4];

        private int NinjaMovement = 0;
        public LifeState ninjaLifeState;
        public NinjaActionState actionState;

        //wall sliding particle effect
        private Emitter wallSlideSparkEmitter;
        private static List<Texture2D> SparkTextures;

        //death particle effects
        private Emitter deathEffectEmitter;
        public static List<Texture2D> GoreTextures;
        public static List<Texture2D> BloodTextures;

        //warp-in particle effect
        private Emitter warpEffectEmitter;

        //dialogue thingy
        private Dialogue dialogue;


        private bool wallSlideFacingLeft;

        private Rope onThisRope;
        public Item HeldItem;
        public Platform attachedPlatform = null;

        int tempDelay = 0;

        #region Init

        public Player(Point topLeft) :
            base(new Rectangle(topLeft.X, topLeft.Y, NINJA_WIDTH, NINJA_HEIGHT), NinjaTexture)
        {
            velocity = Vector2.Zero;
            NinjaMovement = NinjaRunSpeed;

            ninjaLifeState = LifeState.Alive;
            hasGravity = true;
            actionState = NinjaActionState.Standing;
            resizeRect = ScreenCoordinateDrawFrame();

            ResetWarpAnimation();

            running = new AnimationComponent(RunTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            jumping = new AnimationComponent(JumpTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 2);
            airborne = new AnimationComponent(AirborneTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            wallJumping = new AnimationComponent(WallJumpTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 2);
            wallClimbing = new AnimationComponent(WallClimbTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            Rolling = new AnimationComponent(RollTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            wallSliding = new AnimationComponent(WallSlideTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            ItemThrowing = new AnimationComponent(ItemThrowTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            SwordSwinging = new AnimationComponent(SwordSwingTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            SwordRunning = new AnimationComponent(SwordRunTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            ShurikenRunning= new AnimationComponent(ShurikenRunTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            VictoryPose= new AnimationComponent(VictoryTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            SquishDying= new AnimationComponent(SquishDeathTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            FallDying= new AnimationComponent(FallDeathTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            FireDying= new AnimationComponent(FireDeathTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            ExplodeDying = new AnimationComponent(ExplodeDeathTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
            VillainDying = new AnimationComponent(VillainDeathTextures, drawRect.Left, drawRect.Top, NINJA_WIDTH, NINJA_HEIGHT, 1);
        }

        /// <summary>
        /// Return a copy of the existing player. Used to create a ghost player for wall slide.
        /// </summary>
        /// <returns></returns>
        public Player Copy()
        {
            Player ret = new Player(drawRect.Location);
            ret.ninjaLifeState = ninjaLifeState;
            ret.velocity = velocity;
            ret.hasGravity = hasGravity;
            return ret;

        }

        /// <summary>
        /// Causes this class to load its required content into memory for future referencing.
        /// </summary>
        /// <param name="Content"></param>
        public static new void LoadContent(ContentManager Content)
        {
            RunTextures = new List<Texture2D>();
            JumpTextures = new List<Texture2D>();
            AirborneTextures = new List<Texture2D>();
            WallClimbTextures = new List<Texture2D>();
            RollTextures = new List<Texture2D>();
            WallJumpTextures = new List<Texture2D>();
            WallSlideTextures = new List<Texture2D>();
            ItemThrowTextures= new List<Texture2D>();
            SwordSwingTextures= new List<Texture2D>();
            SwordRunTextures= new List<Texture2D>();
            ShurikenRunTextures= new List<Texture2D>();
            VictoryTextures= new List<Texture2D>();
            SquishDeathTextures= new List<Texture2D>();
            FallDeathTextures= new List<Texture2D>();
            FireDeathTextures = new List<Texture2D>();
            ExplodeDeathTextures = new List<Texture2D>();
            VillainDeathTextures = new List<Texture2D>();

            NinjaTexture = Content.Load<Texture2D>("Ninja/New-Ninja-Design-smal");

            SparkTextures = new List<Texture2D>();

            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft1"));
            Texture2D smallspark    = Content.Load<Texture2D>("NonInteractive/smallspark");
            Texture2D mediumspark   = Content.Load<Texture2D>("NonInteractive/mediumspark");
            Texture2D bigspark      = Content.Load<Texture2D>("NonInteractive/bigspark");
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(smallspark);
            SparkTextures.Add(mediumspark);
            SparkTextures.Add(mediumspark);
            SparkTextures.Add(mediumspark);
            SparkTextures.Add(mediumspark);
            SparkTextures.Add(bigspark);

            //Texture data for gore particle emitter
            GoreTextures = new List<Texture2D>();
            Texture2D drop1         = Content.Load<Texture2D>("Particle/drop1");
            Texture2D drop2         = Content.Load<Texture2D>("Particle/drop2");
            Texture2D drop3         = Content.Load<Texture2D>("Particle/drop3");
            Texture2D drop4         = Content.Load<Texture2D>("Particle/drop4");
            Texture2D drop5         = Content.Load<Texture2D>("Particle/drop5");
            Texture2D drop6         = Content.Load<Texture2D>("Particle/drop6");
            Texture2D drop7         = Content.Load<Texture2D>("Particle/drop7");
            Texture2D drop8         = Content.Load<Texture2D>("Particle/drop8");
            Texture2D drop9         = Content.Load<Texture2D>("Particle/drop9");
            Texture2D bone1         = Content.Load<Texture2D>("Particle/bone1");
            Texture2D brokenbone    = Content.Load<Texture2D>("Particle/bone2");

            for (int i = 0; i < 2; i++)
            {
                GoreTextures.Add(drop1);
                GoreTextures.Add(drop2);
                GoreTextures.Add(drop2);
                GoreTextures.Add(drop3);
                GoreTextures.Add(drop4);
                GoreTextures.Add(drop5);
                GoreTextures.Add(drop6);
                GoreTextures.Add(drop7);
                GoreTextures.Add(drop8);
                GoreTextures.Add(drop7);
                GoreTextures.Add(drop8);
            }

            GoreTextures.Add(bone1);
            GoreTextures.Add(brokenbone);

            BloodTextures = new List<Texture2D>();
            BloodTextures.Add(drop1);
            BloodTextures.Add(drop2);
            BloodTextures.Add(drop3);
            BloodTextures.Add(drop4);
            BloodTextures.Add(drop5);
            BloodTextures.Add(drop6);
            BloodTextures.Add(drop7);
            BloodTextures.Add(drop8);

            standTexture = Content.Load<Texture2D>("Ninja/NinjaRunLeft1");
            RunTextures.Add(standTexture);
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft2"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft3"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft4"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft5"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft6"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft7"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft8"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft9"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft10"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft11"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft12"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft13"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft14"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft15"));
            RunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaRunLeft16"));

            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump1"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump2"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump3"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump4"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump5"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump6"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump7"));
            JumpTextures.Add(Content.Load<Texture2D>("Ninja/Jump8"));

            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump1"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump2"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump3"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump4"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump5"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump6"));
            WallJumpTextures.Add(Content.Load<Texture2D>("Ninja/WallJump7"));

            WallClimbTextures.Add(Content.Load<Texture2D>("Ninja/LedgeClimb1"));
            WallClimbTextures.Add(Content.Load<Texture2D>("Ninja/LedgeClimb2"));
            WallClimbTextures.Add(Content.Load<Texture2D>("Ninja/LedgeClimb3"));

            WallSlideTextures.Add(Content.Load<Texture2D>("Ninja/WallSlide"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll1"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll2"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll3"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll4"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll5"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll6"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll7"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll8"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll9"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll10"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll11"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll12"));
            RollTextures.Add(Content.Load<Texture2D>("Ninja/Roll13"));

            WallSlideTextures.Add(Content.Load<Texture2D>("Ninja/WallSlide"));

            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll1"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll2"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll3"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll4"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll5"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll6"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll7"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll8"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll9"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll10"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll11"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll12"));
            AirborneTextures.Add(Content.Load<Texture2D>("Ninja/Roll13"));

            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft1"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft2"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft3"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft4"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft5"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft6"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft7"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft8"));
            ItemThrowTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwordTossLeft9"));

            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft2"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft3"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft4"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft5"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft6"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft7"));
            SwordSwingTextures.Add(Content.Load<Texture2D>("Ninja/NinjaSwingSwordLeft8"));

            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun1"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun2"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun3"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun4"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun5"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun6"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun7"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun8"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun9"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun10"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun11"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun12"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun13"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun14"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun15"));
            SwordRunTextures.Add(Content.Load<Texture2D>("Ninja/SwordRun16"));


            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar1"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar2"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar3"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar4"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar5"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar6"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar7"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar8"));
            ShurikenRunTextures.Add(Content.Load<Texture2D>("Ninja/NinjaStar9"));

            VictoryTextures.Add(Content.Load<Texture2D>("Ninja/Victory"));

            SquishDeathTextures.Add(Content.Load<Texture2D>("Ninja/SquishDeath"));

            //FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath1"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath2"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath3"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath4"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath5"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath6"));
            FallDeathTextures.Add(Content.Load<Texture2D>("Ninja/FallDeath7"));
            Texture2D temp = Content.Load<Texture2D>("Ninja/FallDeath7");
            for (int i = 0; i < 7; ++i)
                FallDeathTextures.Add(temp);

            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft1"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft2"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft3"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft4"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft5"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft6"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft7"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft8"));
            FireDeathTextures.Add(Content.Load<Texture2D>("Ninja/NinjaDeathOnFireLeft9"));

            ExplodeDeathTextures.Add(Content.Load<Texture2D>("Ninja/ExplodeDeath"));

            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft1"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft2"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft3"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft4"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft5"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft6"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft7"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft8"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft9"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft10"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft11"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft12"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft13"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft14"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft15"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft16"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft17"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft18"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft19"));
            VillainDeathTextures.Add(Content.Load<Texture2D>("Ninja/ninjaDeathByVillainLeft20"));


            
        }


        #endregion

        #region Life Cycle

        public override void Update(int gameTime)
        {
            if (deathEffectEmitter != null){
                deathEffectEmitter.Update();
                if (deathEffectEmitter.atMaxParticles())
                    deathEffectEmitter.isEmitting = false;
            }

            //don't update a dead ninja
            if (ninjaLifeState == LifeState.Dead) return;

            if (warpEffectEmitter != null)
            {
                warpEffectEmitter.Update();
                if (warpEffectEmitter.atMaxParticles())
                    warpEffectEmitter.isEmitting = false;
            }

            //turn off spark emission right after every update; it will be turned on again if we are still wall sliding
            if (wallSlideSparkEmitter != null)
            {
                wallSlideSparkEmitter.Update();
                wallSlideSparkEmitter.isEmitting = false;
            }

            //for (int i = 0; i < 4; i++) { ninjaCrush[i] = false; }//resetting the ninjs's so that collisions from the last upadate are not confused with ones from this update
            ninjaCrush[0] = ninjaCrush[1] = ninjaCrush[2] = ninjaCrush[3] = false;

            if (positionMask != PositionState.OnRope)
                rotationAngle = 0.0f;

            AnimationComponent deathAnimation = null;

            // Change the Animation State of the Ninja
            switch(actionState)
            {
                case NinjaActionState.Standing:
                    actionState = NinjaActionState.Running;
                    break;
                case NinjaActionState.Airborne:
                    //Debug.WriteLine("Air");
                    airborne.Update(gameTime);
                    if (positionMask == PositionState.OnFloor)
                    {
                        actionState = NinjaActionState.Running;
                        airborne.reset();
                    }
                    break;
                case NinjaActionState.Running:
                    velocity.X = NinjaMovement;
                    running.Update(gameTime);
                    if (positionMask == PositionState.InAir)
                    {
                        actionState = NinjaActionState.Airborne;
                        running.reset();
                    }
                    break;
                case NinjaActionState.Jumping:
                    //Debug.WriteLine("Jump");
                    if (jumping.animationComplete())
                    {
                        jumping.reset();
                        actionState = NinjaActionState.Airborne;
                    }
                    else
                        jumping.Update(gameTime);
                    velocity.X = NinjaMovement;

                    break;
                case NinjaActionState.WallJumping:
                    velocity.X = NinjaMovement;
                    //TODO: Temp fix below. Wall jump state should end when animation ends, not when he hits the floor.
                    if (positionMask == PositionState.OnFloor)
                    {
                        wallJumping.reset();
                        actionState = NinjaActionState.Running;
                        //wallJumping update
                    }
                    else if (wallJumping.animationComplete())
                    {
                        wallJumping.reset();
                        actionState = NinjaActionState.Airborne;
                    }
                    else
                        wallJumping.Update(gameTime);
                    break;
                case NinjaActionState.WallSliding:
                    //if we are wall sliding, turn on the emission again
                    wallSlideSparkEmitter.isEmitting = true;

                    //create rectangle to correct region based on ninja's direction
                    //this will not be necessary if we can anchor the emitter
                    int xvar;
                    if (!wallSlideFacingLeft)
                        xvar = drawRect.Right - 10;
                    else
                        xvar = drawRect.Left;
                    Rectangle b = new Rectangle(xvar, drawRect.Bottom, 10, 10);

                    wallSlideSparkEmitter.AssignRegion(b);

                    velocity.X = 0;
                    velocity.Y = NinjaWallSlideSpeed;
                    if (WallSlidePlatform.GetPatrol() != null)
                    {
                        velocity.X += WallSlidePlatform.velocity.X;
                        velocity.Y += WallSlidePlatform.velocity.Y;
                    }
                    wallSliding.Update(gameTime);
                    if ((drawRect.Top > WallSlidePlatform.drawRect.Top + WallSlidePlatform.drawRect.Height))
                    {
                        actionState = NinjaActionState.Airborne;
                    }
                    else if(positionMask == PositionState.OnFloor) {
                        actionState = NinjaActionState.Running; 
                    }
                    break;
                case NinjaActionState.WallClimbing:
                    wallClimbing.Update(gameTime);

                    if (wallClimbing.animationComplete())
                    {
                        wallClimbing.reset();
                        actionState = NinjaActionState.Rolling;
                    }
                    else if (positionMask == PositionState.OnFloor)
                    {
                        wallClimbing.reset();
                        actionState = NinjaActionState.Running;
                    }
                    break;
                case NinjaActionState.Rolling:
                    Rolling.Update(gameTime);
                    if (positionMask == PositionState.OnFloor)
                    {
                        actionState = NinjaActionState.Running;
                        Rolling.reset();
                    }
                    break;
                case NinjaActionState.ItemThrowing:
                    ItemThrowing.Update(gameTime);
                    if (ItemThrowing.animationComplete())
                    {
                        ItemThrowing.reset();
                        actionState = NinjaActionState.Airborne;
                    }
                    break;
                case NinjaActionState.SwordSwinging:
                    SwordSwinging.Update(gameTime);
                    if (SwordSwinging.animationComplete())
                    {
                        SwordSwinging.reset();
                        actionState = NinjaActionState.Airborne;
                    }
                    break;
                case NinjaActionState.SwordRunning:
                    velocity.X = NinjaMovement;
                    SwordRunning.Update(gameTime);
                    if (positionMask == PositionState.InAir)
                    {
                        actionState = NinjaActionState.Airborne;
                        running.reset();
                    }
                    break;
                case NinjaActionState.ShurikenRunning:
                    velocity.X = NinjaMovement;
                    ShurikenRunning.Update(gameTime);
                    if (positionMask == PositionState.InAir)
                    {
                        actionState = NinjaActionState.Airborne;
                        running.reset();
                    }
                    break;
                case NinjaActionState.VictoryPose:
                    VictoryPose.Update(gameTime);
                    break;
                case NinjaActionState.FallDying:
                    deathAnimation = FallDying;
                    break;
                case NinjaActionState.FireDying:
                    deathAnimation = FireDying;
                    break;
                case NinjaActionState.ExplodeDying:
                    deathAnimation = ExplodeDying;
                    break;
                case NinjaActionState.VillainDying:
                    deathAnimation = VillainDying;
                    break;
                case NinjaActionState.WarpingIn:
                    UpdateWarpAnimation();
                    break;
            }

            if (deathAnimation != null)
            {
                deathAnimation.Update(gameTime);
                if (deathAnimation.animationComplete())
                {
                    deathAnimation.reset();
                    ninjaLifeState = LifeState.Dead;
                    actionState = NinjaActionState.Airborne;
                }

                //stop the ninja's X movement when he dies
                velocity.X = 0;
                dialogue.showDialog(true);

            }

            if (HeldItem != null && !HeldItem.isFired && ninjaLifeState == LifeState.Alive)
            {
                if (positionMask == PositionState.OnFloor) // Animate with item IF he's running. We don't have animations for other fancy schmancy shit
                {
                    switch (HeldItem.type)
                    {
                        case ItemType.Shuriken:
                            actionState = NinjaActionState.ShurikenRunning;
                            break;
                        case ItemType.Sword:
                            if(actionState != NinjaActionState.SwordSwinging)
                                actionState = NinjaActionState.SwordRunning;
                            break;
                    }
                }
                Point itemPos = this.drawRect.Location;
                itemPos.X = itemPos.X + NINJA_WIDTH / 2;
                HeldItem.SetPosition(itemPos);
            }

            if (tempDelay <= 0)
            {

                switch (actionState)
                {
                    case NinjaActionState.Running:
                        if (facingLeft && velocity.X >= 0)
                        { 
                            Action_Move(facingLeft);
                            NinjaMovement = (-1)*NinjaRunSpeed;
                        }
                        if (!facingLeft && velocity.X <= 0)
                        { 
                            Action_Move(facingLeft);
                            NinjaMovement = NinjaRunSpeed;
                        }
                        break;
                    case NinjaActionState.ShurikenRunning:
                        goto case NinjaActionState.Running;
                    case NinjaActionState.SwordRunning:
                        goto case NinjaActionState.Running;

                }
                base.Update(gameTime);
            }
            else { tempDelay--; }
        }


        /// <summary>
        /// Causes this object to draw itself. Assumes the given spriteBatch is already started.
        /// </summary>
        /// <param name="spriteBatch"></param>
        public override void Draw(SpriteBatch spriteBatch)
        {
            SpriteEffects effect = facingLeft ? SpriteEffects.FlipHorizontally : SpriteEffects.None;

            if (ninjaLifeState == LifeState.Dead)
            {
                deathEffectEmitter.Draw(spriteBatch);
                return;
            }

            switch(actionState)
            {
                case NinjaActionState.Airborne:
                    resizeRect = ScreenCoordinateDrawFrame();
                    resizeRect.Width = 50;
                    resizeRect.Height = 56;
                    airborne.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.WallSliding:
                    if (wallSlideFacingLeft){ effect = SpriteEffects.FlipHorizontally; } else { effect = SpriteEffects.None; }
                    wallSliding.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.WallJumping:
                    wallJumping.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.Running:
                    running.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.Jumping:
                    jumping.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.WallClimbing:
                    wallClimbing.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.Rolling:
                    resizeRect = ScreenCoordinateDrawFrame();
                    resizeRect.Width = 50;
                    resizeRect.Height = 56;
                    Rolling.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.ItemThrowing:
                    resizeRect = ScreenCoordinateDrawFrame();
                    resizeRect.Width = 100;
                    ItemThrowing.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.SwordSwinging:
                    resizeRect = ScreenCoordinateDrawFrame();
                    resizeRect.Width = 100;
                    SwordSwinging.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.SwordRunning:
                    SwordRunning.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.ShurikenRunning:
                    ShurikenRunning.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.VictoryPose:
                    VictoryPose.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.SquishDying:
                    SquishDying.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.FallDying:
                    resizeRect = ScreenCoordinateDrawFrame();
                    resizeRect.Width = 100;
                    deathEffectEmitter.Draw(spriteBatch);
                    FallDying.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.FireDying:
                    FireDying.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.ExplodeDying:
                    ExplodeDying.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect);
                    break;
                case NinjaActionState.VillainDying:
                    resizeRect = ScreenCoordinateDrawFrame();
                    //resizeRect.X += facingLeft ? -50 : 50;
                    resizeRect.Width = 100;
                    deathEffectEmitter.Draw(spriteBatch);
                    VillainDying.Draw(spriteBatch, resizeRect, effect);
                    break;
                case NinjaActionState.WarpingIn:
                    running.Draw(spriteBatch, ScreenCoordinateDrawFrame(), effect, warpDrawColor);
                    break;
                default:
                    if (facingLeft) spriteBatch.Draw(drawTex, ScreenCoordinateDrawFrame(), new Rectangle(0, 0, NINJA_WIDTH, NINJA_HEIGHT), Color.White, rotationAngle, new Vector2(0, 0), SpriteEffects.FlipHorizontally, 0.5f);
                    else spriteBatch.Draw(drawTex, ScreenCoordinateDrawFrame(), new Rectangle(0, 0, NINJA_WIDTH, NINJA_HEIGHT), Color.White, rotationAngle, new Vector2(0, 0), SpriteEffects.None, 0.5f);
                    break;
            }

            if (warpEffectEmitter != null)
                warpEffectEmitter.Draw(spriteBatch);

            if(wallSlideSparkEmitter != null)
                wallSlideSparkEmitter.Draw(spriteBatch);

            if (HeldItem != null)
            {
                HeldItem.Draw(spriteBatch);
            }
        }
        #endregion

        #region Warp In
        //int warpY = -80;
        static int warpFramesMaximum = 60;
        int warpFramesRemaining = warpFramesMaximum;
        //int warpWidth = 1;
        bool warpAnimationCompleted;
        //Rectangle warpDrawFrame;
        Color warpDrawColor = Color.Black;

        private void ResetWarpAnimation()
        {
            warpAnimationCompleted = false;
            warpFramesRemaining = warpFramesMaximum;
            //warpWidth = 1;
            //warpDrawFrame = Rectangle.Empty;
            warpDrawColor = Color.Black;
            actionState = NinjaActionState.WarpingIn;
            MusicManager.PlaySoundEffect(SoundEffects.warpIn);
        }

        private void UpdateWarpAnimation()
        {
            //old Mega Man style warp in code

            /*
            Rectangle modDrawRect = ScreenCoordinateDrawFrame();
            if (!warpAnimationCompleted)
            {
                
                int centerX = modDrawRect.X + (modDrawRect.Width / 2);

                if (warpY < modDrawRect.Top)
                {
                    warpDrawFrame = new Rectangle(centerX, warpY, 2, 80);
                    warpDrawColor = Color.Purple;
                    warpY += 30;
                    if (warpY >= modDrawRect.Top)
                    {
                        Rectangle r = drawRect;
                        r.Y = r.Bottom + 1;
                        r.Height = 1;
                        warpEffectEmitter = new Emitter(r, new Vector2(0f, -3f), Math.PI / 2, 0.5, 0.005, 90, 60, TitleScreen.emitterArt1);
                        warpEffectEmitter.particlesFade = true;
                    }
                }
                else if (2 * warpWidth < modDrawRect.Width)
                {
                    warpWidth += 2;
                    warpDrawFrame = new Rectangle(centerX - warpWidth, modDrawRect.Y, warpWidth * 2, 80);
                    warpDrawColor = Color.White;
                }
                else
                {
                    EndWarpAnimation();
                }
                */

            //fade in from black
            if (!warpAnimationCompleted)
            {
                if(warpFramesRemaining == 0)
                    EndWarpAnimation();
                else if (warpFramesRemaining == warpFramesMaximum)
                {
                    Rectangle r = drawRect;
                    r.Y = r.Bottom + 1;
                    r.Height = 1;
                    warpEffectEmitter = new Emitter(r, new Vector2(0f, -3f), Math.PI / 2, 0.8, 0.001, 140, 60, TitleScreen.emitterArt1);
                    warpEffectEmitter.particlesFade = true;
                    warpFramesRemaining--;
                }
                else{
                    
                    if(warpFramesRemaining <= warpFramesMaximum / 2){
                        float value = ((float)((warpFramesMaximum/2) - warpFramesRemaining) / (warpFramesMaximum/2));
                        warpDrawColor = new Color(value, value, value, 1);
                    }
                    warpFramesRemaining--;

                }
            }

        }

        public void EndWarpAnimation()
        {
            if (warpAnimationCompleted) return;
            warpAnimationCompleted = true;
            actionState = NinjaActionState.Running;
        }

        #endregion

        //public bool wallSlideFacingdrawRect.Left
       // {
       //     if (attachedPlatform != null && Position().X + (NINJA_WIDTH / 2) > attachedPlatform.Position().X + (attachedPlatform.drawRect.Width / 2))
       //     { return true; }
       //     else { return false; }
      //  }
    
        #region Actions

        /// <summary>
        /// Change the ninjas direction of motion.
        /// </summary>
        /// <param name="goLeftYoungMan">Whether or not the ninja will go left from now on.</param>
        public void Action_Move(bool goLeftYoungMan)
        {
            //if (facingLeft == goLeftYoungMan) return; // Don't change anything if we're already going this way.

            if (actionState != NinjaActionState.Airborne && actionState != NinjaActionState.Jumping) NinjaMovement = goLeftYoungMan ? -NinjaRunSpeed : NinjaRunSpeed;

            //Don't want to change directions while wall sliding...it looks tacky
            //if(actionState!= NinjaActionState.WallSliding)
            facingLeft = goLeftYoungMan;

        }

        /// <summary>
        /// Makes the ninja jump if on the ground.
        /// Returns true if jump was successful, false otherwise
        /// </summary>
        public bool Action_Jump()
        {

            if (positionMask == PositionState.OnFloor)
            {
                velocity.Y = NinjaJumpHeight;
                positionMask = PositionState.InAir;
                actionState = NinjaActionState.Jumping;
                return true;
            }
            else if (positionMask == PositionState.OnRope)
            {
                velocity.Y = NinjaJumpHeight;
                positionMask = PositionState.InAir;
                onThisRope.ropeRelease(true);
                actionState = NinjaActionState.Jumping;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Makes the ninja wall jump.
        /// Returns true if wall jump was successful, false otherwise
        /// </summary>
        /// <param name="fLeft"></param>
        public bool Action_WallJump(Command c)
        {
            int result = c.WJCollidesWithConnectedPlatforms(this);
            if (result == 2)
            {
                velocity.Y = NinjaJumpHeight;
                wallJumping.reset();
                actionState = NinjaActionState.WallJumping;
                Action_Move(true);
                //facingLeft = c.FacesLeft;

                tempDelay = 10;
                return true;
            }
            else if(result == 4)
            {
                velocity.Y = NinjaJumpHeight;
                wallJumping.reset();
                actionState = NinjaActionState.WallJumping;
                Action_Move(false);
                //facingLeft = c.FacesLeft;

                tempDelay = 10;
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Makes the ninja slide on a wall associated with the command passed in.
        /// Returns true if wall slide was successful, false otherwise
        /// </summary>
        public bool Action_WallSlide(Command c)
        {
            if (actionState == NinjaActionState.WallSliding)
                return false;
            Platform p = c.CollidesWithConnectedPlatforms(this);
            //Checks to see if the Ninja collides with Command C's list of tagged platforms
            if (p != null)
            {
                if (velocity.X > 0)
                    wallSlideFacingLeft = false;
                else
                    wallSlideFacingLeft = true;

                actionState = NinjaActionState.WallSliding;
                WallSlidePlatform = p;

                //create rectangle for emission based on ninja's direction
                int xvar;
                if (!wallSlideFacingLeft)
                    xvar = drawRect.Right - 10;
                else
                    xvar = drawRect.Left;
                Rectangle b = new Rectangle(xvar, drawRect.Bottom, 10, 10);

                //create the emitter
                wallSlideSparkEmitter = new Emitter(b, //bounding box of the emitter
                    //new Vector2((float)(facingLeft ? Math.Tan(Math.PI / 18) * NinjaWallSlideSpeed : Math.Tan(Math.PI / 18) * -NinjaWallSlideSpeed), 
                    new Vector2(wallSlideFacingLeft ? 0.6215f : -0.6215f, (float)-NinjaWallSlideSpeed), //starting velocity vector (roughly 100 or 80 degrees depending which way ninja is facing)
                    Math.PI / 18,           //maximum angle (in radians) a particle's vector may deviate from the specified one
                    0.3,
                    0.01,                   //intensity (particles are generated at a frequency of 30 frames / thisvalue)
                    300,                    //maximum number of particles
                    30,                     //particle lifespan, in frames
                    SparkTextures,          //Linked list of textures this emitter can use when generating particles
                    new Vector2(0, 1.7f),    //A delta vector acting on particles; in this case, it's working as a lighter form of gravity
                    new Vector2(0, 8f),     //a delta vector cutoff; in this case, it's the max velocity
                    0.2);                   //the fraction of particles generated by this emitter that will employ the above delta vectors to modify their velocity

                wallSlideSparkEmitter.particlesFade = true;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Makes the ninja climb a ledge associated with the command passed in.
        /// Returns true if ledge climb was successful, false otherwise
        /// </summary>
        /// <param name="c"></param>
        public bool Action_LedgeClimb(Command c, LinkedList<Platform> listOfWorldPlatforms)
        {
            LinkedList<Platform> commandConnected = c.ConnectedPlatforms;

            Rectangle collisionBound = drawRect;
            collisionBound.Width *= 2;
            //Player ghost = Copy();
            WorldObject ghost = new WorldObject(drawRect);
            Platform willClimb = null;
            int collisionState;

            if (commandConnected == null) return false;
            
            //For each connected Platform, check to see if the ninja collides with the side, and then check if its ledge is clear to climb
            foreach (Platform p in commandConnected)
            {
                collisionState = Collision.checkCollisions(this,p);
                if ((collisionState == 2 && velocity.X > 0) || (collisionState == 4 && velocity.X < 0))
                {
                    collisionBound.Y = p.drawRect.Top - collisionBound.Height - 1; // move collision bound to sit on top of the platform.
                    ghost.SetDrawFrame(collisionBound);

                    bool canClimb = true;


                    //check to see if the area where the ninja would ledge climb is clear
                    foreach (Platform p2 in listOfWorldPlatforms)
                    {
                        if (Collision.checkCollisions(ghost, p2) != 0)
                        {
                            canClimb = false;
                            break;
                        }
                    }

                    if (canClimb)
                    {
                        willClimb = p;
                        break;
                    }
                }
            }

            ghost = null;

            if (willClimb == null) return false;

            if (drawRect.Top < willClimb.drawRect.Top)
            {
                actionState = NinjaActionState.WallClimbing;
                velocity.Y = (float)NinjaJumpHeight / 1.25f;
                return true;
            }
            return false;
        }

        /// <summary>
        /// does anyone actually use this anymore lol
        /// </summary>
        /// <param name="r"></param>
        public void Action_RopeSwing(Rope r)
        {
            positionMask = PositionState.OnRope;
            onThisRope = r;
            SetPosition(new Point(r.CollisionFrame().X, r.CollisionFrame().Y));
            rotationAngle = r.getRotationAngle();
            velocity = new Vector2(velocity.X, 0); // No more falling
        }

        /// <summary>
        /// Make the ninja throw its held item
        /// Returns true if item throw was successful, false otherwise
        /// </summary>
        public bool Action_ThrowItem(Command c)
        {

            if (HeldItem != null)
            {
                MusicManager.PlaySoundEffect(SoundEffects.throwItem);
                if (actionState != NinjaActionState.WallSliding) actionState = NinjaActionState.ItemThrowing;
                HeldItem.isFired = true;
                Point target = c.GetActionTargetLocation();
                Point direction = new Point(target.X - c.drawRect.Left, target.Y - c.drawRect.Top);
                HeldItem.SetCenter(new Point(c.drawRect.Center.X, c.drawRect.Center.Y));
                HeldItem.SetDirection(direction);
                HeldItem = null;
                return true;
            }
            return false;
        }

        public void Action_SwingSword()
        {
            actionState = NinjaActionState.SwordSwinging;
        }
        #endregion


        #region Deaths
        /// <summary>
        /// Kills the ninja, triggering his death animation
        /// </summary>
        /// 

        public void death()
        {

            if (ninjaLifeState == LifeState.Alive)
            {
                Point p = this.drawRect.Location;
                Metrics.Metrics.writeLine("Level: City");
                Metrics.Metrics.writeLine("Death Location: (" + p.X + "," + p.Y + ")");
                Metrics.Metrics.writeLine("Death Via Generic Death");
                ninjaLifeState = LifeState.Dead;
                deathEffectEmitter = new Emitter(drawRect, new Vector2(0, -11f), Math.PI / 2, 0.5, 0.001, 80, 120, GoreTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);
                MusicManager.PlaySoundEffect(SoundEffects.splat1);

            }
            dialogue.showDialog(true);
            // needs to go to some wait state after this
        }

        /// <summary>
        /// killed by an enemy object
        /// </summary>
        public void villainDeath()
        {
            if (ninjaLifeState == LifeState.Alive)
            {
                Point p = this.drawRect.Location;
                Metrics.Metrics.writeLine("Level: City");
                Metrics.Metrics.writeLine("Death Location: (" + p.X + "," + p.Y + ")");
                Metrics.Metrics.writeLine("Death Via Villain");
                actionState = NinjaActionState.VillainDying;
                ninjaLifeState = LifeState.Dying;
                Rectangle r = drawRect;
                r.X += 24;
                r.Y += 37;
                r.Width = 1;
                r.Height = 1;
                deathEffectEmitter = new Emitter(r, new Vector2(facingLeft? 15f: -15f, 0f), Math.PI / 6, 0.5, 0.001, 80, 120, BloodTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);

                MusicManager.PlaySoundEffect(SoundEffects.splat1);

            }
            // needs to go to some wait state after this
        }

        public void fireDeath()
        {
            if (ninjaLifeState == LifeState.Alive)
            {
                Point p = this.drawRect.Location;
                Metrics.Metrics.writeLine("Level: City");
                Metrics.Metrics.writeLine("Death Location: (" + p.X + "," + p.Y + ")");
                Metrics.Metrics.writeLine("Death Via Fire");
                actionState = NinjaActionState.FireDying;
                ninjaLifeState = LifeState.Dying;
                deathEffectEmitter = new Emitter(drawRect, new Vector2(0, -11f), Math.PI / 2, 0.5, 0.001, 80, 120, GoreTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);

                MusicManager.PlaySoundEffect(SoundEffects.splat1);

            }
            // needs to go to some wait state after this
        }

        /// <summary>
        /// Kills the ninja, triggering his death animation
        /// </summary>
        public void fallDeath()
        {
            if (ninjaLifeState == LifeState.Alive)
            {
                Point p = this.drawRect.Location;
                Metrics.Metrics.writeLine("Level: City");
                Metrics.Metrics.writeLine("Death Location: (" + p.X + "," + p.Y + ")");
                Metrics.Metrics.writeLine("Death Via Falling");
                actionState = NinjaActionState.FallDying;
                
                ninjaLifeState = LifeState.Dying;
                deathEffectEmitter = new Emitter(drawRect, new Vector2(0, -11f), Math.PI / 2, 0.5, 0.001, 80, 120, GoreTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);

                MusicManager.PlaySoundEffect(SoundEffects.splat1);

            }
            // needs to go to some wait state after this
        }

        /// <summary>
        /// Kills the ninja, triggering his death animation
        /// </summary>
        public void explodeDeath()
        {
            if (ninjaLifeState == LifeState.Alive)
            {
                Point p = this.drawRect.Location;
                Metrics.Metrics.writeLine("Level: City");
                Metrics.Metrics.writeLine("Death Location: (" + p.X + "," + p.Y + ")");
                Metrics.Metrics.writeLine("Death Via Explosion");
                actionState = NinjaActionState.ExplodeDying;
                ninjaLifeState = LifeState.Dying;
                deathEffectEmitter = new Emitter(drawRect, new Vector2(0, -11f), Math.PI / 2, 0.5, 0.001, 80, 120, GoreTextures, new Vector2(0f, 0.75f), new Vector2(0, 15f), 1.0);

                MusicManager.PlaySoundEffect(SoundEffects.splat1);

            }
            dialogue.showDialog(true);
            // needs to go to some wait state after this
        }
        #endregion

        //If the ninja is sandwiched by two platforms, kill him. Called once by WorldObjectManager's collision code.
        public void squishCheck(bool c1, bool c2, bool c3, bool c4)
        {
            if( ( c1 && c3 ) || ( c2 && c4 ) ){
                death();
                actionState = NinjaActionState.ExplodeDying;
                return; 
            }
        }

        public void setDialogue(Dialogue d)
        {
            dialogue = d;
        }
    }
}