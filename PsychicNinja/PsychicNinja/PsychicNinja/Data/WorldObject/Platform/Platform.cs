//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Platform.cs
//  @ Date : 1/14/2011
//  @ Author : 
//
//
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

using PsychicNinja.Data.Patrol;
using PsychicNinja.Data.Util;

namespace PsychicNinja.Data.WorldObject
{

    public class Platform : WorldObject
    {
        protected PatrolModel patrol;
        private bool isHazardous;

        //List of ropes the platoform depends on, and suspend boolean
        private List<SuspendRope> suspendRopes;
        public bool suspended = false;

        private static Texture2D[] textureArray;

        /// <summary>
        /// A platform used for Unit testing. DONT CALL THIS IN THE PROJECT
        /// </summary>
        /// <param name="rect"></param>
        public Platform(Rectangle rect) : base( rect, null)
        {

        }

        /// <summary>
        /// Simple constructor of a motionless platform. 
        /// </summary>
        /// <param name="rect">Position and size of the platform.</param>
        /// <param name="Velocity">Vector2: initial velocity of the platform.</param>
        /// <param name="tex">Texture2D: texture for the platform.</param>
        /// <param name="Shape">ObjectShape: shape of the platform.</param>
        /// <param name="IsHazardous">boolean: Platform is hazardous.</param>
        /// <param name="gravity">boolen: Platform is affected by gravity.</param>
        public Platform(Rectangle rect, int textureIndex, ObjectShape Shape, bool IsHazardous, bool gravity) :
            base(rect, textureArray[textureIndex], Shape)
        {
            isHazardous = IsHazardous;
            hasGravity = gravity;
            base.isTiled = true;
            patrol = null;
            suspendRopes = new List<SuspendRope>();
        }

        /// <summary>
        /// Simple constructor of a motionless platform. 
        /// </summary>
        /// <param name="rect">Position and size of the platform.</param>
        /// <param name="Velocity">Vector2: initial velocity of the platform.</param>
        /// <param name="tex">Texture2D: texture for the platform.</param>
        /// <param name="Shape">ObjectShape: shape of the platform.</param>
        /// <param name="IsHazardous">boolean: Platform is hazardous.</param>
        /// <param name="gravity">boolen: Platform is affected by gravity.</param>
        public Platform(Rectangle rect, Texture2D drawTex, ObjectShape Shape, bool IsHazardous, bool gravity) :
            base(rect, drawTex, Shape)
        {
            isHazardous = IsHazardous;
            hasGravity = gravity;
            patrol = null;
            suspendRopes = new List<SuspendRope>();
        }



        public override void Update(int timeElapsed)
        {
            if (patrol != null)
                velocity = patrol.getCurrentVector(timeElapsed);
            if (suspendRopes.Count == 0 && suspended)           //The platform falls
            {
                hasGravity = true;
                suspended = false;
            }
            UpdateFlashing();
            base.Update(timeElapsed);
        }

        public override void Draw(SpriteBatch spriteBatch)
        {
            
            base.Draw(spriteBatch, flashOn? Color.DarkGoldenrod : Color.White);
        }

        /// <summary>
        /// Load the content for this class required by the level that was chosen.
        /// </summary>
        /// <param name="Content">Content manager to load from.</param>
        /// <param name="textureNames">List of texture names to load. Order Matters.</param>
        public static void LoadContent(ContentManager Content, string[] textureNames)
        {
            textureArray = new Texture2D[textureNames.Length];

            for (int i = 0; i < textureNames.Length; ++i)
            {
                textureArray[i] = Content.Load<Texture2D>("Interactive/" + textureNames[i]);
            }
        }

        public void setPatrol(PatrolModel newPatrol)
        {
            patrol = newPatrol;
        }


        public void addRope(SuspendRope r)
        {
            suspended = true;
            suspendRopes.Add(r);
        }

        public void cutRope(SuspendRope r)
        {
            suspendRopes.Remove(r);
        }

        public List<SuspendRope> getRopes()
        {
            return suspendRopes;
        }

        #region Flashing Animation

        int duration = 0;
        const int length = 30;

        bool flashOn = false;

        public void Flash()
        {
            if (duration != 0) return; // Already started

            duration++;

        }

        public void UpdateFlashing()
        {
            if (duration == 0) return;
            duration++;
            
            flashOn = ((duration / 10) % 2 == 0);

            if (duration > 30)
                duration = 0;
        }
        #endregion
    }
}