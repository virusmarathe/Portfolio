//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : GameMenu.cs
//  @ Date : 1/14/2011
//  @ Author : 
//
//
using System.Collections.Generic;
using System.IO;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Input.Touch;

using PsychicNinja.Interface.Engine;
using PsychicNinja.Data.Util;
using PsychicNinja.Data.Object;
using PsychicNinja.Data.Object.Entity;
using PsychicNinja.Logic;
using System;
using PsychicNinja.Interface;

public class CompletionScreen : GameMenu
{
    //private static Rectangle position = new Rectangle(100, 60, 600, 360);
    private static Rectangle position = new Rectangle(0, 0, 800, 480);


    private static Texture2D completionScreenTexture;
    private static Texture2D replayLevelTexture;
    private static Texture2D nextLevelTexture;
    private static Texture2D titleScreenTexture;
    private static Texture2D levelClearedTexture;
    private static Texture2D shine;

    private static SpriteFont newRecordFont;

    private Button replay;
    private Button nextLevel;
    private Button toTitleScreen;

    public bool tempLoadDevLevelFlag;
    private bool shineBarFinished;
    private bool showingTimes;

    View shineBar;
    View clearLogo;
    Emitter sparkles;

    static List<Texture2D> particleArt;

    TimeSpan completionTime;
    string completionTimeString;
    string RecordTimeString;

    bool newRecord;

    Color glowColor;

    int increment = 3;
    int value = 185;

    public CompletionScreen(TimeSpan t, TimeSpan r, bool nr)
    {
        SetDrawFrame(position);
        drawTex = completionScreenTexture;

        this.animatedAlphaFadeIn(60);

        nextLevel = new Button(new Rectangle(210, -300, 380, 100), nextLevelTexture);
        replay = new Button(new Rectangle(-450, 400, 250, 50), replayLevelTexture);
        toTitleScreen = new Button(new Rectangle(1000, 400, 500, 50), titleScreenTexture);
        clearLogo = new View(new Rectangle(1200, 20, 800, 56), levelClearedTexture);
        shineBar = new View(new Rectangle(-100, 20, 100, 56), shine);

        nextLevel.animatedFrameSlide(new Point(0, 550), 45, true);
        replay.animatedFrameSlide(new Point(470, 0), 45, true);
        toTitleScreen.animatedFrameSlide(new Point(-720, 0), 45, true);
        clearLogo.animatedFrameSlide(new Point(-1200, 0), 30, true);

        sparkles = new Emitter(new Rectangle(0, 20, 4, 56), new Vector2(7f, 0f), 0, 0.95, .01, 160, 300, particleArt);
        sparkles.drawInScreenCoordinates = true;
        sparkles.isEmitting = true;
        sparkles.particlesFade = true;

        completionTime = t;
        completionTimeString = string.Format("{0:00}:{1:00}:{2:0000}", (int)completionTime.Minutes, (int)completionTime.Seconds, (int)completionTime.Milliseconds);

        RecordTimeString = string.Format("{0:00}:{1:00}:{2:0000}", (int)r.Minutes, (int)r.Seconds, (int)r.Milliseconds);

        shineBarFinished = false;
        showingTimes = false;
        newRecord = nr;

        glowColor = new Color(value, value, 0); 

        flag = GameMenuFlag.NoFlag;

        MusicManager.PlaySoundEffect(SoundEffects.levelComplete1);

        
        //Not sure why this doesnt work, but we'll need it eventually
        //System.IO.DirectoryInfo contentDir = new System.IO.DirectoryInfo("Level");
        //chapterFiles = contentDir.GetFiles();
    }

    public static new void LoadContent(ContentManager Content)
    {
        newRecordFont = Content.Load<SpriteFont>("Motorwerk");
        completionScreenTexture = Content.Load<Texture2D>("levelcompletebg");
        replayLevelTexture = Content.Load<Texture2D>("replay");
        nextLevelTexture = Content.Load<Texture2D>("nextlevel");
        titleScreenTexture = Content.Load<Texture2D>("ToTitlescreen2");
        shine = Content.Load<Texture2D>("shine thingy");

        levelClearedTexture = Content.Load<Texture2D>("levelcleared");

        particleArt = new List<Texture2D>();

        particleArt.Add(Content.Load<Texture2D>("NonInteractive/smallspark"));
        particleArt.Add(Content.Load<Texture2D>("NonInteractive/mediumspark"));

    }

    public override void Update() 
    {
        base.Update();
        //slick animations here
        clearLogo.Update();
        nextLevel.Update();
        replay.Update();
        toTitleScreen.Update();

        if (showingTimes)
        {
            if (value > 255)
            {
                value = 255;
                increment = 0 - Math.Abs(increment);
            }
            else if (value < 170)
            {
                value = 170;
                increment = Math.Abs(increment);
            }
            else
                value += increment;
            glowColor = new Color(value, value, 0);
        }


        if(!clearLogo.isAnimating()){
            if (!shineBar.isAnimating()  && !shineBarFinished)
            {
                shineBarFinished = true;
                shineBar.animatedFrameSlide(new Point(900, 0), 60, false);
                MusicManager.PlaySoundEffect(SoundEffects.levelComplete2);
                showingTimes = true;
            }
            else
                shineBar.Update();
            sparkles.Update();
            if (sparkles.atMaxParticles())
                sparkles.isEmitting = false;
        }




    }

    public override void Draw(SpriteBatch spriteBatch)
    {
        base.Draw(spriteBatch);

        clearLogo.Draw(spriteBatch);
        shineBar.Draw(spriteBatch);
        replay.Draw(spriteBatch);
        nextLevel.Draw(spriteBatch);
        toTitleScreen.Draw(spriteBatch);
        sparkles.Draw(spriteBatch);

        if (showingTimes)
        {
            Color drawColor;
            if (newRecord)
            {
                drawColor = glowColor;
                spriteBatch.DrawString(newRecordFont, "A NEW RECORD!", new Vector2(10, 180), drawColor);
            }
            else
                drawColor = Color.White;

            spriteBatch.DrawString(CommandMenu.counterfont, "Record Time:  " + RecordTimeString, new Vector2(10, 100), drawColor);
            spriteBatch.DrawString(CommandMenu.counterfont, "Elapsed Time: " + completionTimeString, new Vector2(10, 140), drawColor);


        }
    }

    public override bool ProcessTouch(GestureSample gesture)
    {
        //base.ProcessInput(gesture);

        if (replay.RespondsToGesture(gesture))
        {
            flag = GameMenuFlag.Replay;
        }
        else if (nextLevel.RespondsToGesture(gesture))
        {
            flag = GameMenuFlag.LoadNextLevel;
        }
        else if (toTitleScreen.RespondsToGesture(gesture))
        {
            flag = GameMenuFlag.ToTitleScreen;
        }

        return flag != GameMenuFlag.NoFlag;
    }
}
