//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : GameMenu.cs
//  @ Date : 1/14/2011
//  @ Author : 
//
//
using System.Collections.Generic;
using System.IO;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Input.Touch;

using PsychicNinja.Interface.Engine;
using PsychicNinja.Data.Util;
using Microsoft.Xna.Framework.Media;
using PsychicNinja.Logic;
using System.IO.IsolatedStorage;
using System.Xml.Serialization;
using PsychicNinja.Data.Object.Entity;
using System;

public class TitleScreen : GameMenu
{
    private static Rectangle position = new Rectangle(0, 0, 800, 480);

    private static Texture2D bglayer3;
    private static Texture2D bglayer2;
    private static Texture2D bglayer1;
    private static Texture2D bglayer0;
    private static Texture2D titleLogoBackground;

    private static Texture2D titleScreenTexture;
    private static Texture2D playButtonTexture;
    private static Texture2D gameOptionsTexture;
    private static Texture2D backButtonTexture;
    private static Texture2D titleNinjaTexture;
    private static Texture2D titleNinjaTexture2;

    private static Texture2D activeNinjaTex;

    private static Texture2D chapterSelectTexture;
    private static Texture2D levelSelectTexture;
    private static Texture2D cityChapterSelectTexture;
    private static Texture2D caveChapterSelectTexture;
    private static Texture2D cityChallengeChapterSelectTexture;
    private static Texture2D caveChallengeChapterSelectTexture;
    private static Texture2D devContinueTexture;
    private static Texture2D devLockedTexture;
    private static Texture2D devUnlockedTexture;

    private GameMenuState menuState;
    private GameMenuState nextState;

    private Button gamePlay;
    private Button gameOption;

    private Button back;

    private Button cityChapterButton;
    private Button caveChapterButton;
    private Button cityChallengeChapterButton;
    private Button caveChallengeChapterButton;
//    private Button tempLevelButton;
    private LinkedList<Button> lockedLevels = new LinkedList<Button>();
    
    private Button tempContinueButton;
    
    /// <summary>
    /// keeps track of whichever button was just pressed and is currently in animation.
    /// </summary>
    private View pressedButton;
    public bool tempLoadDevLevelFlag;

    private static Song associatedMusic;
    private static Song selectionMusic;

    private static SpriteFont levelFont;

    private bool showOptionMenu;
    private bool optionAnimationTransition;
    private int optionAnimationDuration;
    private const int optionAnimationDurationLen = 60; // 2 secs
    private Rectangle optionsOpen = new Rectangle(30, 380, 80, 200);
    private Rectangle optionsClosed = new Rectangle(30, 380, 80, 80);

    private View optionsListView;

    private int y = -1;
    private float x1 = -1f;
    private float x2 = -1f;
    const int MAX_LEVELS = 10;


    public int SelectedLevelNum = 0;
    public int SelectedChapterNum = 0;
    

    private Emitter horizontalEmitter1; //front emitter
    private Emitter horizontalEmitter2; //back emitter
    private Emitter verticleEmitter;

    public static List<Texture2D> emitterArt1;
    private static List<Texture2D> emitterArt2;
    private static List<Texture2D> emitterArt3;
    

    public TitleScreen(GraphicsDeviceManager gdm, SaveGameData _gameData)
    {
        PersonalLoadContent();
        int levelReach = _gameData.levelReached[_gameData.worldReached];
        menuState = GameMenuState.MenuStateMain;
        nextState = GameMenuState.MenuStateMain;

        SetDrawFrame(position);
        SetDrawTexture(titleScreenTexture);

        gamePlay = new Button(
            new Rectangle(  GraphicsDeviceManager.DefaultBackBufferWidth/2 - playButtonTexture.Width/2, 
                            GraphicsDeviceManager.DefaultBackBufferHeight/2 - playButtonTexture.Height/2,
                            playButtonTexture.Width, playButtonTexture.Height), playButtonTexture);
        gamePlay.animatedBlink(15,-1);

        gameOption = new Button(new Rectangle(30, 380, 70, 70), gameOptionsTexture);

        back = new Button(new Rectangle(10, 60, 128, 64), backButtonTexture);

        cityChapterButton = new Button(new Rectangle(60, 140, 167, 99), cityChapterSelectTexture);
        caveChapterButton = new Button(new Rectangle(60, 330, 167, 99), caveChapterSelectTexture);
        cityChallengeChapterButton = new Button(new Rectangle(560, 140, 167, 99), cityChallengeChapterSelectTexture);
        caveChallengeChapterButton = new Button(new Rectangle(560, 330, 167, 99), caveChallengeChapterSelectTexture);
        tempContinueButton = new Button(new Rectangle(80, 380, 200, 80), devContinueTexture);
        // this if else is for checking if you are in the top row or bottom row of levels
        if (levelReach <= MAX_LEVELS/2)
        {
            for (int i = 0; i <= levelReach; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 150, 150, 100), devUnlockedTexture);
                b.setExtra(i);
                lockedLevels.AddLast(b);

            }
            for (int i = levelReach + 1; i <= MAX_LEVELS/2; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 150, 150, 100), devLockedTexture);
                b.setExtra(i);
                lockedLevels.AddLast(b);
            }
            for (int i = 0; i < MAX_LEVELS/2; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 300, 150, 100), devLockedTexture);
                b.setExtra(MAX_LEVELS/2+i);
                lockedLevels.AddLast(b);
            }
        }
        else
        {
            for (int i = 0; i < MAX_LEVELS/2; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 150, 150, 100), devUnlockedTexture);
                b.setExtra(i);
                lockedLevels.AddLast(b);
            }
            for (int i = 0; i <= levelReach-MAX_LEVELS/2; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 300, 150, 100), devUnlockedTexture);
                b.setExtra(MAX_LEVELS / 2 + i);
                lockedLevels.AddLast(b);
            }
            for (int i = levelReach-MAX_LEVELS/2 + 1; i < MAX_LEVELS- MAX_LEVELS/2; i++)
            {
                Button b = new Button(new Rectangle(10 + i * 160, 300, 150, 100), devLockedTexture);
                b.setExtra(MAX_LEVELS/2 + i);
                lockedLevels.AddLast(b);
            }
        }
        flag = GameMenuFlag.NoFlag;

        MusicManager.SetSong(associatedMusic);
        MusicManager.StartMusic();

        //Not sure why this doesnt work, but we'll need it eventually
        //System.IO.DirectoryInfo contentDir = new System.IO.DirectoryInfo("Level");
        //chapterFiles = contentDir.GetFiles();

        showOptionMenu = false;
        //optionAnimationTransition = false;
        optionsListView = new View(optionsClosed, gameOptionsTexture);

        pressedButton = cityChapterButton;



        PrepareNextState();
    }

    /// <summary>
    /// Special LoadContent for TitleScreen, called first thing in constructor.  Assumes a ContentManager has
    /// been specified prior.
    /// </summary>
    private static void PersonalLoadContent()
    {

        associatedMusic = Content.Load<Song>("Music/Psychic Ninja");

        selectionMusic = Content.Load<Song>("Music/selection");

        titleScreenTexture = Content.Load<Texture2D>("titlescreen2");
        playButtonTexture = Content.Load<Texture2D>("playbutton2");
        gameOptionsTexture = Content.Load<Texture2D>("gameoptions");
        backButtonTexture = Content.Load<Texture2D>("backbutton");
        titleNinjaTexture = Content.Load<Texture2D>("Ninja/ninjatitle2");
        titleNinjaTexture2 = Content.Load<Texture2D>("Ninja/ninjatitle1");
        devLockedTexture = Content.Load<Texture2D>("eyeclose");
        devUnlockedTexture = Content.Load<Texture2D>("eyeopen");

        levelFont = Content.Load<SpriteFont>("Motorwerk");

        bglayer3 = Content.Load<Texture2D>("backlayer3");
        bglayer2 = Content.Load<Texture2D>("backlayer2");
        bglayer1 = Content.Load<Texture2D>("backlayer1");
        bglayer0 = Content.Load<Texture2D>("backlayer0");

        emitterArt1 = new List<Texture2D>();
        emitterArt1.Add(Content.Load<Texture2D>("Particle/psyflame1"));

        emitterArt2 = new List<Texture2D>();
        emitterArt2.Add(Content.Load<Texture2D>("Particle/psyflame2"));

        emitterArt3 = new List<Texture2D>();
        emitterArt3.Add(Content.Load<Texture2D>("NonInteractive/mediumspark"));

        chapterSelectTexture = Content.Load<Texture2D>("chapterselect");
        levelSelectTexture = Content.Load<Texture2D>("levelselect");
        cityChapterSelectTexture = Content.Load<Texture2D>("leveldevelopment");
        caveChapterSelectTexture = Content.Load<Texture2D>("cavechapter");
        cityChallengeChapterSelectTexture = Content.Load<Texture2D>("citychallengechapter");
        caveChallengeChapterSelectTexture = Content.Load<Texture2D>("cavechallengechapter");
        devContinueTexture = Content.Load<Texture2D>("continue");
        //backgroundStatic = Content.Load<Texture2D>("");
        titleLogoBackground = Content.Load<Texture2D>("scrollingtitlething2");
    }

    private static void unloadContent()
    {

        associatedMusic = null;
        selectionMusic = null;

        titleScreenTexture = null;
        playButtonTexture = null;
        gameOptionsTexture = null;
        backButtonTexture = null;
        titleNinjaTexture = null;
        titleNinjaTexture2 = null;
        devLockedTexture = null;
        devUnlockedTexture = null;

        levelFont = null;

        bglayer3 = null;
        bglayer2 = null;
        bglayer1 = null;
        bglayer0 = null;

        //emitterArt1 = null;

        //emitterArt2 = null;

        emitterArt3 = null;

        chapterSelectTexture = null;
        levelSelectTexture = null;
        cityChapterSelectTexture = null;
        caveChapterSelectTexture = null;
        cityChallengeChapterSelectTexture = null;
        caveChallengeChapterSelectTexture = null;
        devContinueTexture = null;
        titleLogoBackground = null;

    }

    public void updateOptions()
    {
        if (optionAnimationTransition)
        {
            int direction = 2 * (showOptionMenu ? -1 : 1);

            optionsListView.ResizeFrame(0, direction);
            optionsListView.MoveFrame(0, -direction);
            optionAnimationDuration++;
            if (optionAnimationDuration >= optionAnimationDurationLen)
            {
                optionAnimationTransition = false;
                showOptionMenu = !showOptionMenu;
            }
        }
    }


    /// <summary>
    /// sets up all necessary objects and animations for the next state of the title screen object
    /// </summary>
    private void PrepareNextState()
    {
        switch (nextState)
        {
            case GameMenuState.MenuStateMain:
                activeNinjaTex = titleNinjaTexture;
                drawTex = titleScreenTexture;
                back.hidden = true;
                cityChapterButton.hidden = true;
                caveChapterButton.hidden = true;
                cityChallengeChapterButton.hidden = true;
                caveChallengeChapterButton.hidden = true;
                tempContinueButton.hidden = true;
                foreach (Button b in lockedLevels)
                {
                    b.hidden = true;
                }
                gamePlay.animatedBlink(15, -1);
                MediaPlayer.Stop();
                if(MusicManager.soundEnabled)
                    MediaPlayer.Play(associatedMusic);
                break;

            case GameMenuState.MenuStateChapterSelect:
                if (menuState.Equals(GameMenuState.MenuStateMain))
                {
                    MediaPlayer.Stop();
                    if (MusicManager.soundEnabled)
                        MediaPlayer.Play(selectionMusic);
                    horizontalEmitter1 = new Emitter(new Rectangle(0, 480, 800, 100), new Vector2(2f, -1f), 0.0, 0.5, 0.6, 60, 330, emitterArt1, new Vector2(-0.0001f, -0.1f), new Vector2(-0.001f, -3.0f), 1.0);
                    horizontalEmitter1.drawInScreenCoordinates = true;
                    horizontalEmitter2 = new Emitter(new Rectangle(0, 480, 800, 100), new Vector2(0.5f, -0.5f), 0.0, 0.2, 0.9, 60, 330, emitterArt2, new Vector2(-0.0001f, -0.1f), new Vector2(-0.001f, -3.0f), 1.0);
                    horizontalEmitter2.drawInScreenCoordinates = true;

                    verticleEmitter = new Emitter(new Rectangle(348, 200, 30, 20), new Vector2(3f, 0f), Math.PI, 0.8, 0.001, 300, 300, emitterArt3);
                    verticleEmitter.drawInScreenCoordinates = true;
                    verticleEmitter.particlesFade = true;

                    //verticleEmitter = new Emitter
                }
                activeNinjaTex = titleNinjaTexture2;
                drawTex = chapterSelectTexture;
                back.hidden = false;
                gamePlay.hidden = true;
                gameOption.hidden = true;
                if (pressedButton != cityChapterButton) { cityChapterButton.hidden = false; caveChapterButton.hidden = false; cityChallengeChapterButton.hidden = false; caveChallengeChapterButton.hidden = false; }
                tempContinueButton.hidden = true;
                foreach (Button b in lockedLevels)
                {
                    b.hidden = true;
                }
                break;

            case GameMenuState.MenuStateLevelSelect:
                drawTex = levelSelectTexture;
                back.hidden = false;
                gamePlay.hidden = true;
                cityChapterButton.hidden = true;
                caveChapterButton.hidden = true;
                cityChallengeChapterButton.hidden = true;
                caveChallengeChapterButton.hidden = true;
                foreach (Button b in lockedLevels)
                {
                    b.hidden = false;
                }
                //remove this
                //tempContinueButton.hidden = false;
                break;

            default:
                break;
        }
    }

    public override void Update() 
    {
        if (!pressedButton.isAnimating() && nextState != menuState){
            PrepareNextState();
            menuState = nextState;
        }

        //these particular variables provide the illusion that we are "circling" the ninja
        x1 = (x1 + .75f) % 800;
        x2 = (x2 + .5f) % 800;
       

        switch (menuState)
        {
            case GameMenuState.MenuStateMain:

                gamePlay.Update();
                break;
            case GameMenuState.MenuStateChapterSelect:
                cityChapterButton.Update();
                caveChapterButton.Update();
                cityChallengeChapterButton.Update();
                caveChallengeChapterButton.Update();
                if (verticleEmitter.atMaxParticles())
                    verticleEmitter.isEmitting = false;
                verticleEmitter.Update();
                horizontalEmitter1.Update();
                horizontalEmitter2.Update();
                break;
            case GameMenuState.MenuStateLevelSelect:
                if (verticleEmitter.atMaxParticles())
                    verticleEmitter.isEmitting = false;
                verticleEmitter.Update();
                horizontalEmitter1.Update();
                horizontalEmitter2.Update();
                break;
            default:
                break;
        }
    }

    public override void Draw(SpriteBatch sb)
    {
        //draw the city layers
        sb.Draw(bglayer3, new Rectangle(0, 0, 800, bglayer3.Height), Color.White);
        sb.Draw(bglayer2, new Rectangle(0, 0, bglayer2.Width, bglayer2.Height), Color.White);
        sb.Draw(bglayer1, new Rectangle((int)(x1), 0, GraphicsDeviceManager.DefaultBackBufferWidth, GraphicsDeviceManager.DefaultBackBufferHeight), Color.White);
        sb.Draw(bglayer1, new Rectangle((int)(x1 - 800), 0, GraphicsDeviceManager.DefaultBackBufferWidth, GraphicsDeviceManager.DefaultBackBufferHeight), Color.White);
        sb.Draw(bglayer0, new Rectangle((int)(x2), 0, GraphicsDeviceManager.DefaultBackBufferWidth, GraphicsDeviceManager.DefaultBackBufferHeight), Color.White);
        sb.Draw(bglayer0, new Rectangle((int)(x2 - 800), 0, GraphicsDeviceManager.DefaultBackBufferWidth, GraphicsDeviceManager.DefaultBackBufferHeight), Color.White);
        //sb.End();
        //sb.GraphicsDevice.SetRenderTarget(rt);
        //sb.Begin();



        if(horizontalEmitter1 != null && menuState != GameMenuState.MenuStateMain)
            horizontalEmitter1.Draw(sb);

        //ninja doodad
        sb.Draw(activeNinjaTex, new Rectangle(250, 180, 225, 300), Color.White);

        switch(menuState){
            case GameMenuState.MenuStateMain:



                //buttons
                gamePlay.Draw(sb);
                cityChapterButton.Draw(sb);
                tempContinueButton.Draw(sb);
                back.Draw(sb);
                foreach (Button b in lockedLevels)
                {
                    b.Draw(sb);
                }
                //normal titlescreen background

                break;
            case GameMenuState.MenuStateChapterSelect:

                //particles on top of that
                horizontalEmitter2.Draw(sb);

                verticleEmitter.Draw(sb);

                //buttons
                cityChapterButton.Draw(sb);
                caveChapterButton.Draw(sb);
                cityChallengeChapterButton.Draw(sb);
                caveChallengeChapterButton.Draw(sb);

                
                break;

            case GameMenuState.MenuStateLevelSelect:

                //particles on top of that
                horizontalEmitter2.Draw(sb);

                verticleEmitter.Draw(sb);

                //buttons
                tempContinueButton.Draw(sb);
                back.Draw(sb);
                foreach (Button b in lockedLevels)
                {
                    b.Draw(sb);
                    if (b.getExtra() != 9)
                    {
                        sb.DrawString(levelFont, "" + (b.getExtra() + 1), new Vector2(70 + (b.getExtra() % (MAX_LEVELS / 2)) * 160, 170 + (b.getExtra() / (MAX_LEVELS / 2)) * 150), Color.YellowGreen);
                    }
                    else
                    {
                        sb.DrawString(levelFont, "" + (b.getExtra() + 1), new Vector2(60 + (b.getExtra() % (MAX_LEVELS / 2)) * 160, 170 + (b.getExtra() / (MAX_LEVELS / 2)) * 150), Color.YellowGreen);        
                    }
                }
                break;


        }

        //scrolling purple effect on game name letters
        y = y + 1;
        if (y > titleLogoBackground.Height)
            y = 0;
        sb.Draw(titleLogoBackground, new Rectangle(0, y, 800, titleLogoBackground.Height - y), new Rectangle(0, 0, 800, titleLogoBackground.Height - y), Color.White);
        sb.Draw(titleLogoBackground, new Rectangle(0, y - titleLogoBackground.Height, 800, titleLogoBackground.Height), Color.White);
        

        //draws the top level--usually the transparent words at the top of the screen

        sb.Draw(drawTex, new Rectangle(0,0,800,58), Color.White);

        back.Draw(sb);

    }

    public string ProcessTouch(GestureSample gesture, SaveGameData _gameData)
    {
        //base.ProcessInput(gesture);
        int level = _gameData.levelReached[_gameData.worldReached];
        if (!pressedButton.isAnimating())
        {

            if (menuState == GameMenuState.MenuStateMain && this.RespondsToGesture(gesture))
            {
                gamePlay.animatedBlink(1, 30);
                pressedButton = gamePlay;
                nextState = GameMenuState.MenuStateChapterSelect;
            }
            else if (cityChapterButton.RespondsToGesture(gesture) && !cityChapterButton.hidden)
            {
                _gameData.worldReached = 0;
                updateButtons(_gameData.levelReached[_gameData.worldReached]);
                cityChapterButton.animatedBlink(1, 30);
                pressedButton = cityChapterButton;
                SelectedChapterNum = 0;
                nextState = GameMenuState.MenuStateLevelSelect;
            }

            else if (caveChapterButton.RespondsToGesture(gesture) && !caveChapterButton.hidden)
            {
                _gameData.worldReached = 2;
                updateButtons(_gameData.levelReached[_gameData.worldReached]);
                caveChapterButton.animatedBlink(1, 30);
                pressedButton = caveChapterButton;
                SelectedChapterNum = 2;
                nextState = GameMenuState.MenuStateLevelSelect;
            }

            else if (cityChallengeChapterButton.RespondsToGesture(gesture) && !cityChallengeChapterButton.hidden)
            {
                _gameData.worldReached = 1;
                updateButtons(_gameData.levelReached[_gameData.worldReached]);
                cityChallengeChapterButton.animatedBlink(1, 30);
                pressedButton = cityChallengeChapterButton;
                SelectedChapterNum = 1;
                nextState = GameMenuState.MenuStateLevelSelect;
            }

            else if (caveChallengeChapterButton.RespondsToGesture(gesture) && !caveChallengeChapterButton.hidden)
            {
                _gameData.worldReached = 3;
                updateButtons(_gameData.levelReached[_gameData.worldReached]);
                caveChallengeChapterButton.animatedBlink(1, 30);
                pressedButton = caveChallengeChapterButton;
                SelectedChapterNum = 3;
                nextState = GameMenuState.MenuStateLevelSelect;
            }

            else if (back.RespondsToGesture(gesture))
            {
                pressedButton = back;
                nextState = menuState - 1;
            }
            foreach (Button b in lockedLevels)
            {
                if (b.RespondsToGesture(gesture))
                {
                    int buttonLevel = b.getExtra();
                    if (buttonLevel <= level && buttonLevel >= 0)
                    {
                        unloadContent();
                        SelectedLevelNum = buttonLevel;
                        return "i am not a null string. don't use this anymore";
                    }
                }
            }
        }

        return null;
    }

    public void setState(GameMenuState state)
    {
        menuState = state;
    }

    public void updateButtons(int levelReach)
    {
        foreach (Button b in lockedLevels)
        {
            if (b.getExtra() < levelReach + 1)
                b.drawTex = devUnlockedTexture;
            else
                b.drawTex = devLockedTexture;
        }
    }
}
